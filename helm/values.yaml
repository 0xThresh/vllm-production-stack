# -- Default values for chart vllm
# -- Declare variables to be passed into your templates.


# -- Serving engine configuratoon
servingEngineSpec:
  labels:
    environment: "test"
    release: "test"

  modelSpec: []
  #- name: "opt125m"
  #  # -- (Optional) Specify type of GPU to use
  #  gpuModels:
  #    - "NVIDIA-RTX-A6000"

  #  # -- Number of replicas
  #  replicaCount: 1

  #  # Docker image and its start command line
  #  image:
  #    # -- Image repository
  #    repository: "vllm/vllm-openai"
  #    # -- Image tag
  #    tag: "latest"
  #    # -- Container launch command
  #    command: ["vllm", "serve", "facebook/opt-125m", "--dtype", "bfloat16", "--host", "0.0.0.0", "--port", "8000"]
  #    # Optional: env (e.g., for HF_TOKEN)
  #    # Note: HF_HOME is set to /data by-default, so don't need to add it here
  #    env: []
  #
  #
  #  # -- Resource configuration
  #  requestCPU: 4
  #  requestMemory: "16Gi"
  #  requestGPU: 1
  #
  #  # -- PVC configuration
  #  pvcStorage: "50Gi"
  #  pvcMatchLabels:
  #    type: "opt125m"
  
  # -- Container port
  containerPort: 8000
  # -- Service port
  servicePort: 80
  
  # -- Set other environment variables from config map
  configs: {}
  
  # -- Readiness probe configuration
  startupProbe:
    # -- Number of seconds after the container has started before startup probe is initiated
    initialDelaySeconds: 15
    # -- How often (in seconds) to perform the startup probe
    periodSeconds: 10
    # -- Number of times after which if a probe fails in a row, Kubernetes considers that the overall check has failed: the container is not ready
    failureThreshold: 60
     # -- Configuration of the Kubelet http request on the server
    httpGet:
      # -- Path to access on the HTTP server
      path: /health
      # -- Name or number of the port to access on the container, on which the server is listening
      port: 8000
  
  # -- Liveness probe configuration
  livenessProbe:
   # -- Number of seconds after the container has started before liveness probe is initiated
    initialDelaySeconds: 15
    # -- Number of times after which if a probe fails in a row, Kubernetes considers that the overall check has failed: the container is not alive
    failureThreshold: 3
    # -- How often (in seconds) to perform the liveness probe
    periodSeconds: 10
    # -- Configuration of the Kubelet http request on the server
    httpGet:
      # -- Path to access on the HTTP server
      path: /health
      # -- Name or number of the port to access on the container, on which the server is listening
      port: 8000
  
  # -- Disruption Budget Configuration
  maxUnavailablePodDisruptionBudget: ""

  # -- Tolerations configuration (when there are taints on nodes)
  #tolerations:
  #  - key: "node-role.kubernetes.io/control-plane"
  #    operator: "Exists"
  #    effect: "NoSchedule"
  

routerSpec:
  # -- Number of replicas
  replicaCount: 1
  
  # -- Container port
  containerPort: 8000

  # -- Service port
  servicePort: 80

  # -- routing logic, could be "round-robin" or "session"
  routingLogic: "round-robin"

  # -- extra router commandline arguments
  extraArgs: []

  # -- Engine scrape interval
  engineScrapeInterval: 10s

  # -- Window to calculate request stats
  requestStatsWindow: 10s


  labels:
    environment: "router"
    release: "router"

  # -- TODO: Resource configuration
  #resources:
  #  requests:
  #    # -- Number of CPUs
  #    cpu: 1
  #    # -- CPU memory configuration
  #    memory: 1Gi
  #  limits:
  #    # -- Number of CPUs
  #    cpu: 1
  #    # -- CPU memory configuration
  #    memory: 1Gi
  
  # -- TODO: Readiness probe configuration
  #startupProbe:
  #  # -- Number of seconds after the container has started before startup probe is initiated
  #  initialDelaySeconds: 5
  #  # -- How often (in seconds) to perform the startup probe
  #  periodSeconds: 5
  #  # -- Number of times after which if a probe fails in a row, Kubernetes considers that the overall check has failed: the container is not ready
  #  failureThreshold: 100
  #   # -- Configuration of the Kubelet http request on the server
  #  httpGet:
  #    # -- Path to access on the HTTP server
